import dotenv from 'dotenv';
import { Sequelize } from 'sequelize';

dotenv.config();

const sequelize = new Sequelize(
  process.env.DB_NAME,
  process.env.DB_USER,
  process.env.DB_PASSWORD,
  {
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    dialect: process.env.DB_DIALECT
  }
);

async function checkAndFixClasses() {
  try {
    console.log('üîç V√©rification des classes...');
    
    // V√©rifier les classes existantes
    const [classes] = await sequelize.query('SELECT id, name, teacher_id, subject, level FROM Classes ORDER BY id');
    console.log('üìö CLASSES EXISTANTES:', classes);
    
    // V√©rifier les professeurs
    const [teachers] = await sequelize.query('SELECT id, name, email FROM Users WHERE role = "teacher"');
    console.log('üë®‚Äçüè´ PROFESSEURS:', teachers);
    
    // V√©rifier les √©l√®ves et leurs classes
    const [students] = await sequelize.query('SELECT id, name, email, class FROM Users WHERE role = "student"');
    console.log('üë®‚Äçüéì √âL√àVES:', students);
    
    // Chercher la classe "3√®me A"
    const classe3emeA = classes.find(c => c.name === '3√®me A');
    
    if (!classe3emeA) {
      console.log('‚ùå Classe "3√®me A" manquante !');
      
      // Trouver un professeur pour l'assigner
      const teacher = teachers.find(t => t.name.includes('weyde') || t.name.includes('Hector'));
      if (!teacher) {
        console.log('‚ùå Aucun professeur trouv√© pour assigner √† la classe 3√®me A');
        return;
      }
      
      console.log(`‚úÖ Cr√©ation de la classe "3√®me A" avec le professeur ${teacher.name}...`);
      
      // Cr√©er la classe 3√®me A
      await sequelize.query(`
        INSERT INTO Classes (name, level, subject, teacher_id, max_students, description, room, academic_year, current_students, average_score, completion_rate, status, created_at, updated_at)
        VALUES ('3√®me A', '3√®me', 'SVT', ${teacher.id}, 30, 'Classe de 3√®me A - Sciences de la Vie et de la Terre', 'Salle 101', '2023-2024', 0, 0.00, 0.00, 'active', NOW(), NOW())
      `);
      
      console.log('‚úÖ Classe "3√®me A" cr√©√©e avec succ√®s !');
    } else {
      console.log('‚úÖ Classe "3√®me A" existe d√©j√†');
    }
    
    // V√©rifier √† nouveau
    const [newClasses] = await sequelize.query('SELECT id, name, teacher_id, subject, level FROM Classes ORDER BY id');
    console.log('üìö CLASSES APR√àS CORRECTION:', newClasses);
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await sequelize.close();
  }
}

checkAndFixClasses(); 