import { connectDB, sequelize } from '../config/database.js';
import { User, Class } from '../models/index.js';

const fixTeacherAssignment = async () => {
  try {
    await connectDB();
    console.log('üîß Correction de l\'assignation du professeur weydee Hector...\n');

    // 1. Trouver le professeur weydee Hector
    const weydeeHector = await User.findOne({
      where: {
        role: 'teacher',
        name: 'weydee Hector'
      }
    });

    if (!weydeeHector) {
      console.log('‚ùå Professeur weydee Hector non trouv√©');
      return;
    }

    console.log(`‚úÖ Professeur trouv√©: ${weydeeHector.name} (ID: ${weydeeHector.id})`);

    // 2. V√©rifier s'il y a d√©j√† une classe 3√®me A
    let classe = await Class.findOne({
      where: { name: '3√®me A' }
    });

    if (classe) {
      console.log(`üìö Classe 3√®me A trouv√©e (ID: ${classe.id})`);
      
      // Mettre √† jour le teacherId
      await classe.update({ teacherId: weydeeHector.id });
      console.log('‚úÖ Classe 3√®me A assign√©e au professeur weydee Hector');
    } else {
      console.log('üìö Cr√©ation de la classe 3√®me A...');
      
      // Cr√©er la classe
      classe = await Class.create({
        name: '3√®me A',
        teacherId: weydeeHector.id,
        subject: 'Sciences de la Vie et de la Terre',
        level: '3√®me',
        academic_year: '2024-2025'
      });
      
      console.log('‚úÖ Classe 3√®me A cr√©√©e et assign√©e au professeur weydee Hector');
    }

    // 3. V√©rifier les √©l√®ves de cette classe
    const students = await User.findAll({
      where: { 
        role: 'student',
        class: '3√®me A'
      }
    });

    console.log(`\nüë• √âl√®ves trouv√©s dans la classe 3√®me A: ${students.length}`);
    students.forEach(student => {
      console.log(`  - ${student.name} (${student.email})`);
    });

    // 4. V√©rification finale
    console.log('\n=== V√âRIFICATION FINALE ===');
    const finalCheck = await Class.findOne({
      where: { name: '3√®me A' },
      include: [
        {
          model: User,
          as: 'teacher',
          attributes: ['name', 'email']
        }
      ]
    });

    if (finalCheck && finalCheck.teacher) {
      console.log(`‚úÖ Classe: ${finalCheck.name}`);
      console.log(`‚úÖ Professeur: ${finalCheck.teacher.name} (${finalCheck.teacher.email})`);
      console.log(`‚úÖ Nombre d'√©l√®ves: ${students.length}`);
      
      console.log('\nüéâ CORRECTION TERMIN√âE !');
      console.log('Le professeur weydee Hector peut maintenant voir ses √©l√®ves dans la section "Mes √©l√®ves".');
    } else {
      console.log('‚ùå Erreur lors de la v√©rification finale');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la correction:', error);
  } finally {
    await sequelize.close();
  }
};

fixTeacherAssignment(); 