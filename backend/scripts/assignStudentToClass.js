import { connectDB, sequelize } from '../config/database.js';
import { User } from '../models/index.js';

const assignStudentToClass = async () => {
  try {
    await connectDB();
    console.log('üîß Assignation de l\'√©l√®ve √† la classe 3√®me A...\n');

    // 1. Trouver l'√©l√®ve
    const student = await User.findOne({
      where: { 
        role: 'student',
        name: 'elhadj diakhate'
      }
    });

    if (!student) {
      console.log('‚ùå √âl√®ve elhadj diakhate non trouv√©');
      return;
    }

    console.log(`‚úÖ √âl√®ve trouv√©: ${student.name} (ID: ${student.id})`);
    console.log(`   Classe actuelle: ${student.class || 'Aucune'}`);

    // 2. Mettre √† jour la classe
    await student.update({ class: '3√®me A' });
    console.log('‚úÖ √âl√®ve assign√© √† la classe 3√®me A');

    // 3. V√©rification finale
    const updatedStudent = await User.findOne({
      where: { id: student.id }
    });

    console.log('\n=== V√âRIFICATION FINALE ===');
    console.log(`‚úÖ √âl√®ve: ${updatedStudent.name}`);
    console.log(`‚úÖ Classe: ${updatedStudent.class}`);
    console.log(`‚úÖ Email: ${updatedStudent.email}`);

    // 4. V√©rifier combien d'√©l√®ves sont maintenant dans la classe 3√®me A
    const studentsInClass = await User.findAll({
      where: { 
        role: 'student',
        class: '3√®me A'
      }
    });

    console.log(`\nüë• Nombre d'√©l√®ves dans la classe 3√®me A: ${studentsInClass.length}`);
    studentsInClass.forEach(s => {
      console.log(`   - ${s.name} (${s.email})`);
    });

    console.log('\nüéâ ASSIGNATION TERMIN√âE !');
    console.log('Le professeur weydee Hector peut maintenant voir son √©l√®ve dans la section "Mes √©l√®ves".');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'assignation:', error);
  } finally {
    await sequelize.close();
  }
};

assignStudentToClass(); 