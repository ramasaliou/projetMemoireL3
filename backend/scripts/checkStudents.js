import { connectDB, sequelize } from '../config/database.js';
import { User } from '../models/index.js';

const checkStudents = async () => {
  try {
    await connectDB();
    console.log('üîç V√©rification des √©l√®ves et leurs classes...\n');

    // 1. Voir tous les √©l√®ves
    console.log('=== TOUS LES √âL√àVES ===');
    const students = await User.findAll({
      where: { role: 'student' },
      attributes: ['id', 'name', 'email', 'class', 'level']
    });
    
    if (students.length === 0) {
      console.log('‚ùå Aucun √©l√®ve trouv√© dans la base de donn√©es');
      return;
    }

    students.forEach(student => {
      console.log(`ID: ${student.id} | Nom: ${student.name} | Email: ${student.email} | Classe: ${student.class || 'N/A'} | Niveau: ${student.level || 'N/A'}`);
    });

    // 2. V√©rifier les √©l√®ves par classe
    console.log('\n=== √âL√àVES PAR CLASSE ===');
    const studentsByClass = {};
    
    students.forEach(student => {
      const className = student.class || 'Sans classe';
      if (!studentsByClass[className]) {
        studentsByClass[className] = [];
      }
      studentsByClass[className].push(student);
    });

    Object.keys(studentsByClass).forEach(className => {
      console.log(`\nüìö Classe: ${className}`);
      console.log(`   Nombre d'√©l√®ves: ${studentsByClass[className].length}`);
      studentsByClass[className].forEach(student => {
        console.log(`   - ${student.name} (${student.email})`);
      });
    });

    // 3. V√©rifier sp√©cifiquement la classe 3√®me A
    console.log('\n=== √âL√àVES DE LA CLASSE 3√àME A ===');
    const students3emeA = students.filter(s => s.class === '3√®me A');
    
    if (students3emeA.length === 0) {
      console.log('‚ùå Aucun √©l√®ve dans la classe 3√®me A');
      console.log('\nüí° SUGGESTIONS:');
      console.log('1. V√©rifiez que les √©l√®ves ont bien le champ "class" renseign√©');
      console.log('2. Assurez-vous que la valeur est exactement "3√®me A" (avec l\'accent)');
      console.log('3. Ou modifiez la classe d\'un √©l√®ve existant:');
      
      if (students.length > 0) {
        const firstStudent = students[0];
        console.log(`\nExemple pour assigner ${firstStudent.name} √† la classe 3√®me A:`);
        console.log(`UPDATE users SET class = '3√®me A' WHERE id = ${firstStudent.id};`);
      }
    } else {
      console.log(`‚úÖ ${students3emeA.length} √©l√®ve(s) trouv√©(s) dans la classe 3√®me A:`);
      students3emeA.forEach(student => {
        console.log(`   - ${student.name} (${student.email})`);
      });
    }

    // 4. Statistiques g√©n√©rales
    console.log('\n=== STATISTIQUES ===');
    console.log(`Total d'√©l√®ves: ${students.length}`);
    console.log(`√âl√®ves avec classe assign√©e: ${students.filter(s => s.class).length}`);
    console.log(`√âl√®ves sans classe: ${students.filter(s => !s.class).length}`);

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
  } finally {
    await sequelize.close();
  }
};

checkStudents(); 